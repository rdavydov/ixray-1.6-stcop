#include "common.h"
#include "sload.h"

#ifdef	ATOC

float4 	main	( p_flat I ) : SV_Target
{
	float4 D 	= tbase	 	(I.tcdh);
	D.w = (D.w-def_aref*0.5f)/(1-def_aref*0.5f);
	return D;
}

#else	//	ATOC
f_deffer 	main	( p_flat I )
{
  f_deffer	O;

  // 1. Base texture + kill pixels with low alpha
	float4 D = tbase(I.tcdh);
	clip(D.w - def_aref);

#ifdef	USE_TDETAIL
	D.rgb	= 2*D.rgb * s_detail.Sample( smp_base, I.tcdbump ).rgb;
#endif

	// hemi,sun,material
	float 	ms	= xmaterial		;
#ifdef USE_LM_HEMI
	float4	lm 	= s_hemi.Sample( smp_rtlinear, I.lmh);
	float 	h  	= get_hemi(lm);
# ifdef USE_R2_STATIC_SUN
			ms 	= get_sun(lm);
# endif
#else
	float 	h	= I.position.w	;
# ifdef USE_R2_STATIC_SUN
		 	ms	= I.tcdh.w		;
# endif
#endif

  // 2. Standart output
  float4 Ne = float4(normalize((float3)I.N.xyz), h);
  O = pack_gbuffer(
  								Ne,
								float4 	(I.position.xyz + Ne.xyz*def_virtualh/2.0f	, 	ms			),
								float4	(D.rgb,											def_gloss	) );
								
  O.V = I.hpos_curr.xy / I.hpos_curr.w - I.hpos_old.xy / I.hpos_old.w;
  return O;
}

#endif	//	ATOC
